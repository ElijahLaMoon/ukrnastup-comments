package org.ukrnastup

import cats.effect.IO
import cats.syntax.option.*
import telegramium.bots.Chat
import telegramium.bots.User

import java.time.ZoneId
import java.time.ZonedDateTime

package object comments {

  /** Current time by Kyiv
    */
  def now(): ZonedDateTime = ZonedDateTime.now(ZoneId.of("Europe/Kyiv"))

  // little helper to avoid too many `IO.unit`s
  def ifOrUnit[A](predicate: Boolean)(thunk: => IO[A]) =
    if predicate then thunk.void
    else IO.unit

  extension (user: User) {
    def toAdmin: Admin =
      import Admin._

      Admin(
        id = InnerId(0L), // the value is generated by db on insertion
        telegramId = TelegramUserId(user.id),
        telegramName =
          user.lastName.fold(TelegramName(user.firstName))(ln => TelegramName(s"${user.firstName} $ln")),
        telegramUsername = user.username.map(TelegramUsername(_)),
      )
  }

  extension (chatOrUser: Chat | User) {

    private def tgId = BannedUser.TelegramUserId(chatOrUser match
      case chat: Chat => chat.id
      case user: User => user.id
    )

    def toBannedUser(
        banReason: String,
        bannedBy: String,
        bannedByTelegramId: Long,
        messageGotBannedFor: String,
        messageGotBannedForLink: String,
        updatedAt: Option[ZonedDateTime] = None,
    ): BannedUser =
      import BannedUser._

      BannedUser(
        id = InnerId(0L), // the value is generated by db on insertion
        isCurrentlyBanned = IsCurrentlyBanned(true),
        isChannel = IsChannel(chatOrUser match
          case _: Chat => true
          case _: User => false
        ),
        telegramId = chatOrUser.tgId,
        telegramName = chatOrUser match {
          case chat: Chat =>
            chat
              .title
              .map(TelegramName(_))
              .get // since this method is intended for chats this should never fail
          case user: User =>
            user.lastName.fold(TelegramName(user.firstName))(ln => TelegramName(s"${user.firstName} $ln"))
        },
        telegramUsername = chatOrUser match {
          case chat: Chat => None
          case user: User => user.username.map(TelegramUsername(_))
        },
        reason = BanReason(banReason),
        bannedBy = BannedBy(bannedBy),
        bannedByTelegramId = BannedByTelegramUserId(bannedByTelegramId),
        messageGotBannedFor = MessageGotBannedFor(messageGotBannedFor).some,
        messageGotBannedForLink = MessageGotBannedForLink(messageGotBannedForLink).some,
        updatedAt = updatedAt,
      )
  }
}
